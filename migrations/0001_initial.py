# Generated by Django 4.1 on 2023-02-27 05:45

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Essay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Ref_Publication_date', models.DateField(verbose_name='Ref.Publication date')),
                ('Ref_Article_title', models.CharField(max_length=64, verbose_name='Ref.Article title')),
                ('Ref_Journal', models.CharField(max_length=64, verbose_name='Ref.Journal')),
                ('Ref_First_author', models.CharField(max_length=64, verbose_name='Ref.First author')),
                ('Ref_Corresponding_author', models.CharField(max_length=64, verbose_name='Ref.Corresponding author')),
                ('Ref_DOI_number', models.CharField(max_length=64, verbose_name='Ref.DOI number')),
                ('Mode', models.CharField(max_length=64, verbose_name='Mode')),
                ('Mode_Loss_electrons_Electrode_layer', models.CharField(max_length=64, verbose_name='Mode.Loss electrons.Electrode layer')),
                ('Mode_Loss_electrons_layer', models.CharField(max_length=64, verbose_name='Mode.Loss electrons layer')),
                ('Mode_Get_electrons_layer', models.CharField(max_length=64, verbose_name='Mode.Get electrons layer')),
                ('Mode_Get_electrons_layer_Electrode_layer', models.CharField(max_length=64, verbose_name='Mode.Get electrons layer.Electrode layer')),
                ('TENG_Improve_friction_properties_or_propose_new_methods', models.CharField(max_length=64, verbose_name='TENG.Improve friction properties or propose new methods')),
                ('TENG_structure', models.CharField(max_length=64, verbose_name='TENG.structure')),
                ('TENG_Power_generation_application', models.CharField(max_length=64, verbose_name='TENG.Power generation.application')),
                ('TENG_Sensor_field_application', models.CharField(max_length=64, verbose_name='TENG.Sensor field.application')),
                ('Efficiency_Voltage', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Efficiency.Voltage(V)')),
                ('Efficiency_Current', models.CharField(max_length=64, verbose_name='Efficiency.Current')),
                ('Efficiency_Current_modified', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Efficiency.Current modified(nA)')),
                ('Efficiency_Current_modified_l', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Efficiency.Current modified(μA/cm2)')),
                ('Efficiency_Charge', models.CharField(max_length=64, verbose_name='Efficiency.Charge')),
                ('Efficiency_Charge_modified', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Efficiency.Charge modified(μC/m2)')),
                ('Efficiency_Power', models.CharField(max_length=64, verbose_name='Efficiency.Power')),
                ('Efficiency_Power_modified', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Efficiency.Power modified(W/m2)')),
                ('Efficiency_Resistance', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Efficiency.Resistance(MΩ)')),
                ('Efficiency_Area', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Efficiency.Area(cm2)')),
                ('Level', models.SmallIntegerField(choices=[(1, '*'), (2, '**'), (3, '***'), (4, '****'), (5, '*****')], verbose_name='')),
            ],
        ),
    ]
